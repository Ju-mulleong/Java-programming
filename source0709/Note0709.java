package source0709;

public class Note0709 {
}


/*
동적 바인딩
    실제 가리키는 객체의 메소드 호출
    오버라이딩을 했을때 , 무조건 자식 메소드가 호출된다.

봉인된 클래스
    상속 가능한 자식 클래스를 따로 지정 가능
    잘 쓰지는 않음


======================================================
인터페이스
    정해진 '규격'에 맞으면 연결 가능

    Java에서 인터페이스
        객체와 객체 사이의 상호 작용을 위한 규격
        설계도, 명세서 역할
            같은 동작을 수행한다는 것을 보장함
            모든 메소드가 추상메소드이고 일반 변수(필드)를 가질 수 없음
    !! 과제할때 인터페이스 수정 절대 하지 말기

public interface 아래에 public~~ 생략 할수도있지만, 헷갈리니까
생략 x 그럴수도 있다는것만 알아두자

대부분 abstract 사용

implements 뒤에 인터페이스이름은
반드시 추상 메소드 모두 구현한 클래스 작성해야 함
다시 말하지만, 인터페이스는 상속이 아니다. 서로 공통되는 기능 구현


클래스 다이어그램
    점선은 인터페이스 활용
    실선은 상속

다시, 인터페이스는 상속 개념이 아니라 공통된 기능 구현이다.

--API documents 챙겨보기

'타입'으로 형변환 잘 이해 안간다 8장 18p조금 이해 가긴하는데

타입 변환 실제 사례 : Collection 클래스

객체 타입 확인은 마찬가지로 instanceof 사용

==========================================================
예외 (Exception)
    오동작이나 결과에 악영향을 미칠 수 있는 '실행 중 발생한 오류'
    ex) null points exception(객체 생성안하고 사용)

코드가 죽지않고 동작하도록 하는게 예외처리

일반 예외/실행 예외
    일반 예외: 컴파일러가 예외 처리 코드 여부를 검사하는 예외
                반드시 코드에서 처리!

    실행 예외: 프로그램 실행 도중 발생하는 예외
                컴파일 타임에서 체크되지 않음


예외 처리
    예외가 발생하더라도, 프로그램이 계속 실행될 수 있도록 하는 것
    예외 발생 -> 자바 플랫폼 인지 -> 응용프로그램에 전달

예외 처리 방법
    tey-catch-finally 블록
        예외 발생을 알려서 예외를 수정할 수 있도록 함
        (주로 이것 사용할 예정)

    throws 예외
        예외 던지기(떠넘기기)
        현재 메소드를 호출한 메소드로 예외를 떠넘김
        Java API

try-catch-finally
    try에서 예외가 없을 경우(정상동작)
        catch블럭 건너뛰고
        finally블럭 실행

    try에서 예외 발생
        그 아래 줄 코드부터 수행 x
        catch블럭으로 가서 예외 처리 실행
        finally블럭 실행


    pdf에는 catch(NullPointerException)이지만
        최상위클래스인 Exception 쓰는게 나음, 어떤 예외가 발생할지 모르므로
        e.printStackTrace();를 기본적으로 많이 사용


다중 catch로 예외 처리하기
    주의! 최상위 클래스 Exception 사용시 모든 예외 적용되므로 순서 꼬일 수 있음
    or연산자(|)로 여러 개 연결해서 사용 가능


리소스: 데이터를 제공하는 객체(ex 파일 등)
    리소스를 사용하다가 예외가 발생될 경우에도 안전하게 닫는 것이 중요

리소스 자동 닫기(try-with-resource)
    try 괄호에 리소스를 여는 코드를 작성
        try 블록이 정상적으로 실행을 완료하거나, 예외가 발생하면
        자동으로 리소스의 close()메소드가 호출됨

    사용조건: 리소스는 java.lang.AutoCloseable 인터페이스 구현하고
            close() 메소드 재정의 해야함

    여러 개의 리소스:
            외부에서 정의해놓고, 리소스의 변수만 괄호안에 넣어서 사용 가능

파일을 Scanner로 읽어올 수 있다!
    try()안에 Scanner 객체 생성하면 역시 자동으로 close 함

19p, 20p 잘 쓸 일 없을 것

예외 떠넘기기(throws)
    Class.forName()으로 클래스 있는지 확인
    예외 처리하기 싫을 때 사용
    JVM에서 예외 처리는 예외 내용을 화면에 출력 하는것뿐

사용자 정의 예외
    직접 정의하는 예외 클래스
    참고만, 쓸 일 없다.


제일 중요한건 6p

hw02
    인터페이스 패키지 이름정도만 수정 가능
    그 외엔 일절 수정 x

    좌석의 배치, 좌석의 개수만 달라진다.
    하나의 프로젝트로 구현
    1a,2b 같은 식
    1은 column, a는 row
    문자열 처리 프로젝트 따로 만들어서 숫자->문자 부터 확인
    isDigit으로 숫자인지 확인 (A2 등으로 오기입 확인용)
    10a 같은 경우도 있으므로 이럴떈 1과 0 둘 다 확인하도록

    빈 좌석만 예약하도록.
    예약된 좌석만 취소되도록
    클래스 다이어그램은 참고용 똑같이 할 필요 없다
    전체 메뉴와 swissAirline 메뉴 2개 다 scanner 필요
        swissAirline 생성자에 scanner 객체 전달 하여 사용
        close는 빠져나와서 메인메뉴에서 종료
        매번 scanner 객체 생성하지 않도록

     일단 메인 전체메뉴 출력부터 구현
     syso등 인텔리j에서도 가능한지 찾아보기


 */
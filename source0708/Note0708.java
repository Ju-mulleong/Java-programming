package source0708;

public class Note0708 {

}

/* 접근 제한자
 * 
 * 디폴트(int 등)
 * 
 * private public
 * 
 * 외부 패키지 에서 쓸려면 반드시 public 사용
 * 
 * int n, void g()등은 디폴트, 외부에서 사용하려면 public앞에 붙여야함
 * 
 * 
 * class D extends B
 * 	D는 B를 상속받음
 * 
 * Setter 변경자 메소드
 * 	private 필드의 값 변경할 떄 사용
 * 
 * Getter 접근자 메소드
 * 	private 필드의 값을 읽어옴
 * 
 * private int age;로 지정한 값을
 * public void setAge(int age); 등으로 간접 접근 가능
 * 직접 접근하면 파일 디버깅시 추적 어려움
 * 
 * lab04
 * 
 * 
 * =============================================================
 * 상속(inheritance)
 * 	private를 제외한 부모 클래스의 필드와 메소드를 자식 클래스가 물려받음
 * 	상속 화살표 머리쪽이 부모(super class)
 * 	상속받은 (필드, 메소드) 들은 자식 클래스 내부에 선언할 필요 없음
 * 
 * OOP에서 상속의 장점
 * 	이미 개발된 클래스 재사용 -> 코드의 중복 줄임 -> 소프트웨어 생산성 향상
 * 
 * 여러개의 클래스가 있을때, 공통된 기능이 있다면
 * 	공통된 기능을 별도 클래스로 지정해서 부모 클래스로 지정,
 * 
 * extends 키워드를 사용하여 상속받음.
 * 
 * 자바는 다중 상속 허용하지않음 (여러개의 부모 클래스 상속 불가능)
 * 
 * 
 * 부모 생성자 호출
 * 	부모 객체가 먼저 생성되고, 자식 객체가 생성된다.
 * 
 * 
 * 메소드 재정의(오버라이딩)
 * 	부모 클래스의 메소드를 자식 클래스에서 재정의
 * 		메소드 이름, 매개변수 타입 및 개수, 리턴 타입 등 모든 것을 동일하게 작성
 * 	메소드가 오버라이딩 되면 부모 메소드는 숨겨지고 자식 메소드가 우선적으로 사용됨(자식 메소드를 호출)
 * 	부모 메소드 호출이 필요한 경우, super.메소드이름() 사용
 * 
 * protected
 * 	같은 패키지 내의 모든 클래스에서 접근 가능
 * 	다른 패키지에 있어도 자식 클래스는 접근 가능
 * 
 * 자동 타입 변환
 * 	
 * 	업캐스팅- 이해 어렵다
 * 		자식 클래스 객체를 부모 클래스 타입으로 자동 변환
 * 
 * 		사용 이유: 부모 클래스의 일반적인 기능 사용
 * 				 다양한 종류의 자식 클래스들을 파라미터(부모 클래스 타입)로 받기 위해서
 * 				ex)charsequence였나? 그거 받으면 아래 문자열등등 타입 모두 받을 수 있다.
 * 
 * 		
 * 강제 타입 변환
 * 	부모 클래스 객체를 자식 클래스 타입으로 변환
 * 	-개발자가 명시적으로 타입 변환
 * 
 * 	Upcasting한 객체를 원래대로 되돌릴 때 사용
 * 
 * 다형성
 * 	한 타입의 참조변수(주로 부모타입의 참조변수)로 여러 타입(여러 자식타입)의 객체를 참조 가능
 * 	같은 이름의 메소드이지만, 클래스나 객체에 떄라 다르게 동작(오버로딩)
 * 	
 *  	필드의 다향성
 *  		하나의 필드에 여러 다른 객체 대입
 * 
 * 
 * 동적 바인딩
 * 	
 * 
 * 객체 타입 확인
 * 	instanceof로 Upcasting된 객체 타입 판단
 * 	
 * 
 * 추상 클래스, 추상 메소드
 * 	구현 없이 선언만 되어 있음.
 * 
 * 	추상 메소드
 * 		자식 클래스에서 반드시 오버라이딩해서 구현해야됨
 * 		abstract 키워드 사용
 * 
 * 	추상 클래스
 * 		추상 메소드를 선언해놓고 상속을 통해 자식 클래스에서 메소드를 완성하도록 유도
 * 		상속을 위한 클래스이므로 객체 생성할 수 없음
 * 		
 * 		설계와 구현을 분리
 * 			부모 클래스: 개념 정의
 * 			자식 클래스: 구체적인 동작 구현
 * 		하지만 당장은 이것들보다 뒤에 배우는 인터페이스 더 많이 사용
 * 
 * 	강의자료 20p, 27p중요!! 확실히 이해하기
 * 
 * 
 * 
 * 
 * 
 */
 